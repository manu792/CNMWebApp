@model CNMWebApp.Models.UserRolesUnidadCategoria

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-6 col-md-offset-3">
        <h2>Agregar Empleado</h2>

        <!-- Modal -->
        <div class="modal fade" id="confirmation-modal" tabindex="-1" role="dialog"
             aria-labelledby="myModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"
                                aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h4 class="modal-title" id="myModalLabel"></h4>
                    </div>
                    <div class="modal-body"></div>
                    <div class="modal-footer">
                        <button id="cancel-btn" type="button" class="btn" data-dismiss="modal">No</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Sí</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Modal End -->

        @using (Html.BeginForm("Create", "User", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.EsSuperusuario, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.EsSuperusuario)
                            @Html.ValidationMessageFor(model => model.EsSuperusuario, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PrimerApellido, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PrimerApellido, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PrimerApellido, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SegundoApellido, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.SegundoApellido, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SegundoApellido, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SelectedRoleId, "Rol", htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.SelectedRoleId, new SelectList(Model.Roles, "Id", "Name"), "- Seleccione un rol -", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SelectedRoleId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FechaIngreso, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-9">
                        <div class='input-group date fecha-ingreso'>
                            @Html.EditorFor(model => model.FechaIngreso, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-th"></span>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.FechaIngreso, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="unidades-tecnicas" class="form-group">
                    @Html.LabelFor(model => model.SelectedUnidadTecnicaId, "Unidad Tecnica", htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.SelectedUnidadTecnicaId, new SelectList(Model.UnidadesTecnicas, "UnidadTecnicaId", "Nombre"), "- Seleccione una unidad tecnica -", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SelectedUnidadTecnicaId)
                    </div>
                </div>

                <div id="categorias" class="form-group">
                    @Html.LabelFor(model => model.SelectedCategoriaId, "Categoria", htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.SelectedCategoriaId, new SelectList(Model.Categorias, "CategoriaId", "Nombre"), "- Seleccione una categoria -", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SelectedCategoriaId)
                    </div>
                </div>

                <div id="jefes" class="form-group">
                    @Html.LabelFor(model => model.Jefes, "Jefe", htmlAttributes: new { @id = "role-dropdown", @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.SelectedJefeId, new SelectList(Model.Jefes, "Id", "NombreCompleto"), "- Seleccione un jefe -", new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.SelectedJefeId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Foto, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextBoxFor(model => model.Foto, new { type = "file", accept = ".png, .jpg, .jpeg", @class = "btn btn-info" })
                        @Html.ValidationMessageFor(model => model.Foto)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6 col-md-offset-3">
                        <input id="submit-btn" type="submit" value="Continuar" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Regresar", "Index")
        </div>
    </div>
</div>

@section scripts
{
    <script>
        $('#submit-btn').click(function () {
            var roleId = $('#SelectedRoleId').val();

            if (roleId == 4) { // Director
                var id = $('#Id').val();

                $("#SelectedJefeId").val(id);
            }
        });


        $('#SelectedJefeId').selectpicker({
            liveSearch: true,
            showSubtext: true,
            liveSearchPlaceholder: 'Buscar...',
            noneSelectedText: 'No se encontraron jefes para la unidad técnica'
        });

        $('#EsSuperusuario').change(function (e) {
            if (e.target.checked) {
                $('.modal-title').html('<strong>Super Usuario</strong>');
                $('.modal-body').html('<p>¿Está seguro(a) que desea convertir el empleado en un Super Usuario?');
                $('#confirmation-modal').modal();
            }
        });

        $('#cancel-btn').click(function () {
            $('#EsSuperusuario').prop('checked', false);
        });

        $('#SelectedUnidadTecnicaId').change(function (e) {
            if (!e.target.value) { return; }

            $('#SelectedJefeId').html('');

            var roleId = $('#SelectedRoleId').val();
            var unidadTecnicaId = $('#SelectedUnidadTecnicaId').val();

            if (roleId == 1) { // Funcionario
                var url = '@Url.Action("ObtenerJefesPorUnidadTecnica", "User")';

                $.ajax({
                    url: url,
                    cache: false,
                    data: { unidadTecnicaId: unidadTecnicaId },
                    type: "GET",
                    success: function (data) {
                        console.log(data);
                        for (var i = 0; i < data.Jefes.length; i++) {
                            $('#SelectedJefeId').append($('<option>', {
                                value: data.Jefes[i].Id,
                                text: data.Jefes[i].NombreCompleto
                            }));
                        }
                        if (data.Jefes.length === 0) {
                            $('#SelectedJefeId option').remove();
                        }
                        $('#SelectedJefeId').selectpicker('refresh');
                    },
                    error: function (response) {
                        console.log(response.responseText);
                        alert("error : " + response.responseText);
                    }
                });
            }
        });

        $('#SelectedRoleId').change(function (e) {
            var roleId = e.target.value;
            var url = '@Url.Action("ObtenerUnidadesCategoriasPorRoleId", "User")';
            $('#SelectedJefeId').html('');

            if (roleId == 4) { // Director
                var id = $('#Id').val();
                var nombre = $('#Nombre').val();
                var primerApellido = $('#PrimerApellido').val();
                var obj = { Id: id, NombreCompleto: `${nombre} ${primerApellido}` };
                var markup = '';

                markup += "<option value=" + obj.Id + ">" + obj.NombreCompleto + "</option>";
                $("#SelectedJefeId").append(markup);
                $('#jefes').hide();
            }

            else if (roleId == 2 || roleId == 5) { // Jefatura o Recursos Humanos
                var url = '@Url.Action("ObtenerDirectorGeneral", "User")';

                $.ajax({
                    url: url,
                    cache: false,
                    type: "GET",
                    success: function (data) {
                        var markup = "";

                        markup += "<option value=" + data.Jefe.Id + ">" + data.Jefe.NombreCompleto + "</option>";
                        $("#SelectedJefeId").append(markup);
                        $('#jefes').hide();
                    },
                    error: function (response) {
                        console.log(response.responseText);
                        alert("error : " + response.responseText);
                    }
                });
            }

            else {
                $('#jefes').show();
            }
        });



        var roleId = $("#SelectedRoleId").val();
        var url = '@Url.Action("ObtenerUnidadesCategoriasPorRoleId", "User")';

        if (roleId) {
            $.ajax({
                url: url,
                cache: false,
                data: { roleId: roleId },
                type: "GET",
                success: function (data) {
                    var markup = "";

                    $('#SelectedUnidadTecnicaId').html('');
                    $('#SelectedCategoriaId').html('');

                    // Lleno dropdown con datos de unidades tecnicas
                    for (var x = 0; x < data.Unidades.length; x++) {
                        markup += "<option value=" + data.Unidades[x].Value + ">" + data.Unidades[x].Text + "</option>";
                    }
                    $("#SelectedUnidadTecnicaId").append(markup);
                    $("#unidades-tecnicas").show();
                    if (data.Unidades.length > 1) {
                        var val = $("#SelectedUnidadTecnicaId option:first").val();
                        $("#SelectedUnidadTecnicaId").val(val).trigger('change');
                    }
                    if (data.Unidades.length === 1) {
                        $("#unidades-tecnicas").hide();
                    }

                    // Lleno dropdown con datos de categorias
                    markup = "";
                    for (var x = 0; x < data.Categorias.length; x++) {
                        markup += "<option value=" + data.Categorias[x].Value + ">" + data.Categorias[x].Text + "</option>";
                    }
                    $("#SelectedCategoriaId").append(markup);
                    $("#categorias").show();
                    if (data.Categorias.length === 1) {
                        $("#categorias").hide();
                    }

                },
                error: function (response) {
                    console.log(response.responseText);
                    alert("error : " + response.responseText);
                }
            });
        }
    </script>
}